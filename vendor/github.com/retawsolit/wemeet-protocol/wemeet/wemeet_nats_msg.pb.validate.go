// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wemeet_nats_msg.proto

package wemeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NatsSubjects with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NatsSubjects) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsSubjects with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NatsSubjectsMultiError, or
// nil if none found.
func (m *NatsSubjects) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsSubjects) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemApiWorker

	// no validation rules for SystemJsWorker

	// no validation rules for SystemPublic

	// no validation rules for SystemPrivate

	// no validation rules for Chat

	// no validation rules for Whiteboard

	// no validation rules for DataChannel

	if len(errors) > 0 {
		return NatsSubjectsMultiError(errors)
	}

	return nil
}

// NatsSubjectsMultiError is an error wrapping multiple validation errors
// returned by NatsSubjects.ValidateAll() if the designated constraints aren't met.
type NatsSubjectsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsSubjectsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsSubjectsMultiError) AllErrors() []error { return m }

// NatsSubjectsValidationError is the validation error returned by
// NatsSubjects.Validate if the designated constraints aren't met.
type NatsSubjectsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsSubjectsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsSubjectsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsSubjectsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsSubjectsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsSubjectsValidationError) ErrorName() string { return "NatsSubjectsValidationError" }

// Error satisfies the builtin error interface
func (e NatsSubjectsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsSubjects.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsSubjectsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsSubjectsValidationError{}

// Validate checks the field values on NatsMsgServerToClient with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NatsMsgServerToClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsMsgServerToClient with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NatsMsgServerToClientMultiError, or nil if none found.
func (m *NatsMsgServerToClient) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsMsgServerToClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Event

	// no validation rules for Msg

	if len(errors) > 0 {
		return NatsMsgServerToClientMultiError(errors)
	}

	return nil
}

// NatsMsgServerToClientMultiError is an error wrapping multiple validation
// errors returned by NatsMsgServerToClient.ValidateAll() if the designated
// constraints aren't met.
type NatsMsgServerToClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsMsgServerToClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsMsgServerToClientMultiError) AllErrors() []error { return m }

// NatsMsgServerToClientValidationError is the validation error returned by
// NatsMsgServerToClient.Validate if the designated constraints aren't met.
type NatsMsgServerToClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsMsgServerToClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsMsgServerToClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsMsgServerToClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsMsgServerToClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsMsgServerToClientValidationError) ErrorName() string {
	return "NatsMsgServerToClientValidationError"
}

// Error satisfies the builtin error interface
func (e NatsMsgServerToClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsMsgServerToClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsMsgServerToClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsMsgServerToClientValidationError{}

// Validate checks the field values on NatsMsgClientToServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NatsMsgClientToServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsMsgClientToServer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NatsMsgClientToServerMultiError, or nil if none found.
func (m *NatsMsgClientToServer) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsMsgClientToServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Event

	// no validation rules for Msg

	// no validation rules for BinMsg

	if len(errors) > 0 {
		return NatsMsgClientToServerMultiError(errors)
	}

	return nil
}

// NatsMsgClientToServerMultiError is an error wrapping multiple validation
// errors returned by NatsMsgClientToServer.ValidateAll() if the designated
// constraints aren't met.
type NatsMsgClientToServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsMsgClientToServerMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsMsgClientToServerMultiError) AllErrors() []error { return m }

// NatsMsgClientToServerValidationError is the validation error returned by
// NatsMsgClientToServer.Validate if the designated constraints aren't met.
type NatsMsgClientToServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsMsgClientToServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsMsgClientToServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsMsgClientToServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsMsgClientToServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsMsgClientToServerValidationError) ErrorName() string {
	return "NatsMsgClientToServerValidationError"
}

// Error satisfies the builtin error interface
func (e NatsMsgClientToServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsMsgClientToServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsMsgClientToServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsMsgClientToServerValidationError{}

// Validate checks the field values on NatsKvRoomInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NatsKvRoomInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsKvRoomInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NatsKvRoomInfoMultiError,
// or nil if none found.
func (m *NatsKvRoomInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsKvRoomInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DbTableId

	// no validation rules for RoomId

	// no validation rules for RoomSid

	// no validation rules for Status

	// no validation rules for EmptyTimeout

	// no validation rules for MaxParticipants

	// no validation rules for Metadata

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return NatsKvRoomInfoMultiError(errors)
	}

	return nil
}

// NatsKvRoomInfoMultiError is an error wrapping multiple validation errors
// returned by NatsKvRoomInfo.ValidateAll() if the designated constraints
// aren't met.
type NatsKvRoomInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsKvRoomInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsKvRoomInfoMultiError) AllErrors() []error { return m }

// NatsKvRoomInfoValidationError is the validation error returned by
// NatsKvRoomInfo.Validate if the designated constraints aren't met.
type NatsKvRoomInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsKvRoomInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsKvRoomInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsKvRoomInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsKvRoomInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsKvRoomInfoValidationError) ErrorName() string { return "NatsKvRoomInfoValidationError" }

// Error satisfies the builtin error interface
func (e NatsKvRoomInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsKvRoomInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsKvRoomInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsKvRoomInfoValidationError{}

// Validate checks the field values on NatsKvUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NatsKvUserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsKvUserInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NatsKvUserInfoMultiError,
// or nil if none found.
func (m *NatsKvUserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsKvUserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserSid

	// no validation rules for Name

	// no validation rules for RoomId

	// no validation rules for IsAdmin

	// no validation rules for IsPresenter

	// no validation rules for Metadata

	// no validation rules for JoinedAt

	// no validation rules for ReconnectedAt

	// no validation rules for DisconnectedAt

	if len(errors) > 0 {
		return NatsKvUserInfoMultiError(errors)
	}

	return nil
}

// NatsKvUserInfoMultiError is an error wrapping multiple validation errors
// returned by NatsKvUserInfo.ValidateAll() if the designated constraints
// aren't met.
type NatsKvUserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsKvUserInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsKvUserInfoMultiError) AllErrors() []error { return m }

// NatsKvUserInfoValidationError is the validation error returned by
// NatsKvUserInfo.Validate if the designated constraints aren't met.
type NatsKvUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsKvUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsKvUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsKvUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsKvUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsKvUserInfoValidationError) ErrorName() string { return "NatsKvUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e NatsKvUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsKvUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsKvUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsKvUserInfoValidationError{}

// Validate checks the field values on MediaServerConnInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MediaServerConnInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaServerConnInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MediaServerConnInfoMultiError, or nil if none found.
func (m *MediaServerConnInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaServerConnInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Token

	// no validation rules for EnabledE2Ee

	if len(errors) > 0 {
		return MediaServerConnInfoMultiError(errors)
	}

	return nil
}

// MediaServerConnInfoMultiError is an error wrapping multiple validation
// errors returned by MediaServerConnInfo.ValidateAll() if the designated
// constraints aren't met.
type MediaServerConnInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaServerConnInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaServerConnInfoMultiError) AllErrors() []error { return m }

// MediaServerConnInfoValidationError is the validation error returned by
// MediaServerConnInfo.Validate if the designated constraints aren't met.
type MediaServerConnInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaServerConnInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaServerConnInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaServerConnInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaServerConnInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaServerConnInfoValidationError) ErrorName() string {
	return "MediaServerConnInfoValidationError"
}

// Error satisfies the builtin error interface
func (e MediaServerConnInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaServerConnInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaServerConnInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaServerConnInfoValidationError{}

// Validate checks the field values on NatsInitialData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NatsInitialData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsInitialData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NatsInitialDataMultiError, or nil if none found.
func (m *NatsInitialData) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsInitialData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NatsInitialDataValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocalUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "LocalUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "LocalUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NatsInitialDataValidationError{
				field:  "LocalUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMediaServerInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "MediaServerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NatsInitialDataValidationError{
					field:  "MediaServerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMediaServerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NatsInitialDataValidationError{
				field:  "MediaServerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NatsInitialDataMultiError(errors)
	}

	return nil
}

// NatsInitialDataMultiError is an error wrapping multiple validation errors
// returned by NatsInitialData.ValidateAll() if the designated constraints
// aren't met.
type NatsInitialDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsInitialDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsInitialDataMultiError) AllErrors() []error { return m }

// NatsInitialDataValidationError is the validation error returned by
// NatsInitialData.Validate if the designated constraints aren't met.
type NatsInitialDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsInitialDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsInitialDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsInitialDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsInitialDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsInitialDataValidationError) ErrorName() string { return "NatsInitialDataValidationError" }

// Error satisfies the builtin error interface
func (e NatsInitialDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsInitialData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsInitialDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsInitialDataValidationError{}

// Validate checks the field values on NatsSystemNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NatsSystemNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsSystemNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NatsSystemNotificationMultiError, or nil if none found.
func (m *NatsSystemNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsSystemNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Msg

	// no validation rules for SentAt

	// no validation rules for WithSound

	if len(errors) > 0 {
		return NatsSystemNotificationMultiError(errors)
	}

	return nil
}

// NatsSystemNotificationMultiError is an error wrapping multiple validation
// errors returned by NatsSystemNotification.ValidateAll() if the designated
// constraints aren't met.
type NatsSystemNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsSystemNotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsSystemNotificationMultiError) AllErrors() []error { return m }

// NatsSystemNotificationValidationError is the validation error returned by
// NatsSystemNotification.Validate if the designated constraints aren't met.
type NatsSystemNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsSystemNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsSystemNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsSystemNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsSystemNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsSystemNotificationValidationError) ErrorName() string {
	return "NatsSystemNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e NatsSystemNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsSystemNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsSystemNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsSystemNotificationValidationError{}

// Validate checks the field values on NatsUserMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NatsUserMetadataUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NatsUserMetadataUpdate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NatsUserMetadataUpdateMultiError, or nil if none found.
func (m *NatsUserMetadataUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *NatsUserMetadataUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Metadata

	if len(errors) > 0 {
		return NatsUserMetadataUpdateMultiError(errors)
	}

	return nil
}

// NatsUserMetadataUpdateMultiError is an error wrapping multiple validation
// errors returned by NatsUserMetadataUpdate.ValidateAll() if the designated
// constraints aren't met.
type NatsUserMetadataUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NatsUserMetadataUpdateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NatsUserMetadataUpdateMultiError) AllErrors() []error { return m }

// NatsUserMetadataUpdateValidationError is the validation error returned by
// NatsUserMetadataUpdate.Validate if the designated constraints aren't met.
type NatsUserMetadataUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NatsUserMetadataUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NatsUserMetadataUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NatsUserMetadataUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NatsUserMetadataUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NatsUserMetadataUpdateValidationError) ErrorName() string {
	return "NatsUserMetadataUpdateValidationError"
}

// Error satisfies the builtin error interface
func (e NatsUserMetadataUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNatsUserMetadataUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NatsUserMetadataUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NatsUserMetadataUpdateValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FromName

	// no validation rules for FromUserId

	// no validation rules for SentAt

	// no validation rules for IsPrivate

	// no validation rules for Message

	// no validation rules for FromAdmin

	if m.ToUserId != nil {
		// no validation rules for ToUserId
	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}
